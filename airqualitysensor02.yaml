esphome:
  name: airqualitysensor02
  friendly_name: AirQualitySensor02
  on_boot:
    then:
      - globals.set:
          id: g_oled_is_enabled
          value: "true"

esp8266:
  board: d1_mini_pro
  framework:
    version: recommended

logger:

api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "Airqualitysensor02"
    password: "NsRWvszf2kfY"

captive_portal:

web_server:
  port: 80

i2c:
  sda: 4
  scl: 5
  scan: true
  id: bus_a

globals:
  - id: g_oled_is_enabled
    type: bool
    restore_value: false
    initial_value: "true"

switch:
  - platform: template
    name: "Enable OLED Display"
    id: oled_enable_switch
    lambda: |-
      return id(g_oled_is_enabled);
    turn_on_action:
      - globals.set:
          id: g_oled_is_enabled
          value: 'true'
      - logger.log: "OLED Display turned ON via switch"
    turn_off_action:
      - globals.set:
          id: g_oled_is_enabled
          value: 'false'
      - logger.log: "OLED Display turned OFF via switch"

sensor:
  - platform: scd4x
    i2c_id: bus_a
    co2:
      name: "CO2 Concentration"
      id: co2_reading
    temperature:
      name: "Temperature"
      id: temp_reading
    humidity:
      name: "Humidity"
      id: hum_reading
    address: 0x62
    update_interval: 15s # How often to read data (in seconds)

font:
  - file: "gfonts://Roboto"
    id: roboto_font
    size: 16
    # Allow lower 2 for CO₂
    glyphs: '"°_!%(),-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz₂' 

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    address: 0x3C
    i2c_id: bus_a
    rotation: 0
    lambda: |-
      if (id(g_oled_is_enabled)) {
        it.printf(0, 0, id(roboto_font), "CO₂: %.0f ppm", id(co2_reading).state);
        it.printf(0, 20, id(roboto_font), "Temp: %.1f°C", id(temp_reading).state);
        it.printf(0, 40, id(roboto_font), "Hum:  %.1f %%", id(hum_reading).state);
      } else {
        it.fill(COLOR_OFF);
      }

